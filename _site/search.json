[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Explore word learning in one child’s vocabulary",
    "section": "",
    "text": "Our analysis explores the words a single child had produced by age two, displayed by their age of first production (AoFP). The interactive visualation allows users to explore regression models predicting AoFP on the basis of different aspects of the child’s language input. See Main Text and Supplemental Information of Roy et al. (2015) for more information about models and variable coding.\n\nredivis = require(\"redivis@0.3.3\")  \n<!-- ML = require('ml@5.0.0/dist/ml.js') -->\nML = require(\"https://www.lactame.com/lib/ml/6.0.0/ml.min.js\")\n<!-- import {MLR} from \"ml-regression-multivariate-linear\" -->\nimport {interval} from \"@mootari/range-slider@1786\"\nd3 = require(\"d3-array@2\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndata = {\n  await redivis.authorize({apiToken: \"AAAB2SjUBXVq08b7x9S4IGZpSshTMYTr\"});\n  return await redivis\n  .user('imathews')\n  .dataset('word_birth_browser_data')\n  .table('words')\n  .listRows()\n}\n\n\n\n\n\n\n\nviewof vars = Inputs.checkbox(Object.keys(data[0]).slice(4,14), \n{label: \"Predictors\", value: [\"s_cmu_phon\",\"sln_freq_pre\",\"s_uttlen_pre\"]})\n\n\n\n\n\n\n\nfunction toMatrix(arr, width) {\n  return arr.reduce(function (rows, key, index) { \n    return (index % width == 0 ? rows.push([key]) \n      : rows[rows.length-1].push(key)) && rows;\n  }, []);\n}\n\nfunction addColumn(tableData, newColumnName, newColumnFunction) {\n  return tableData.map(row => {\n    let returnObject = row;\n    returnObject[newColumnName] = newColumnFunction(row)\n    return returnObject\n  })\n}\n\naoa = toMatrix(data.map(a => a.aoa), 1)\nxs = data.map(d => vars.map(k => d[k]))\nmlr = new ML.MultivariateLinearRegression(xs, aoa)\npreds = mlr.predict(xs)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nwith_pred = {\n  return data.map((x, i) => Object.assign(x, preds[i]));\n}\n\n\n\n\n\n\n\nPlot.plot({\n  x: {\n    label: \"Model prediction\", \n    domain: [10, 24]\n  },\n  y: {label: \"Age of First Production (months)\"},\n  color: {legend: true},\n  marks: \n    [\n      Plot.dot(with_pred,\n      {\n        x: \"0\", \n        y: \"aoa\", \n        stroke: \"small_cat\",\n        tip: true\n      }),\n      Plot.linearRegressionY(data,\n      {\n        x: \"0\",\n        y: \"aoa\",\n        stroke: \"red\"\n      })\n    ]\n})"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This site visualizes and disseminates data from Roy, Frank, Decamp, Miller, & Roy (2015), PNAS.\nThe website is based on a Shiny app originally made for the publication by Mike Frank. This demo showcases the use of Observable for client-side visualizations."
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "Dataset",
    "section": "",
    "text": "The summary dataset for this website is a single CSV, with each row representing a single word in the child’s vocabulary from age 9 - 25 months. Included is a variety of meta-data about the word including when it was first produced (column ‘aoa’).\n\nredivis = require(\"redivis@0.3.3\")\n\n\n\n\n\n\n\nbutton = (data, filename = 'roy_2015_data.csv') => {\n  if (!data) throw new Error('Array of data required as first argument');\n\n  let downloadData;\n  if (filename.includes('.csv')) {\n    downloadData = new Blob([d3.csvFormat(data)], { type: \"text/csv\" });\n  } else {\n    downloadData = new Blob([JSON.stringify(data, null, 2)], {\n      type: \"application/json\"\n    });\n  }\n\n  const size = (downloadData.size / 1024).toFixed(0);\n  const button = DOM.download(\n    downloadData,\n    filename,\n    `Download ${filename} (~${size} KB)`\n  );\n  return button;\n}\n\nbutton(data)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndata = {\n  await redivis.authorize({apiToken: \"AAAB2SjUBXVq08b7x9S4IGZpSshTMYTr\"});\n  return await redivis\n  .user('imathews')\n  .dataset('word_birth_browser_data')\n  .table('words')\n  .listRows()\n}\n\n\n\n\n\n\n\ntable = Inputs.table(data)"
  }
]